# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

plugins:
  - serverless-python-requirements
  - serverless-s3-remover
  - serverless-stack-output

custom:
  remover:
    buckets:
      - ${self:provider.environment.CANDIDATE_S3_BUCKET}
  pythonRequirements:
    dockerizePip: true
  output:
    handler: scripts/output.handler
    file: .build/output.json

service: appd-lambda-python-##UNIQUE_ID##

provider:
  name: aws
  runtime: python3.8
  stage: dev
  environment:
    CANDIDATE_S3_BUCKET: "candidate-resume-${opt:stage, self:provider.stage}-##UNIQUE_ID##"
    AWS_REGION_STR: ${opt:region, self:provider.region}
    APPDYNAMICS_ACCOUNT_NAME: ""
    APPDYNAMICS_AGENT_ACCOUNT_ACCESS_KEY: ""
    APPDYNAMICS_APPLICATION_NAME: ""
    APPDYNAMICS_CONTROLLER_HOST: ""
    APPDYNAMICS_SERVERLESS_API_ENDPOINT: ""
    APPDYNAMICS_CONTROLLER_PORT: 443
    APPDYNAMICS_LOG_LEVEL: ""    

  iamRoleStatements:
    - Effect: Allow
      Action:
        - lambda:InvokeFunction
      Resource: "*"
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject        
      Resource: 
        Fn::Join: ['', [Fn::GetAtt: [ UploadBucket, Arn ], '/*'] ]
    - Effect: Allow
      Action:
        - s3:ListBucket 
      Resource:
        Fn::GetAtt: [ UploadBucket, Arn ]

resources:
  Resources:
    UploadBucket:
      Type: AWS::S3::Bucket
      DeletionPolicy: Delete
      Properties:
        BucketName: ${self:provider.environment.CANDIDATE_S3_BUCKET}
        AccessControl: Private
        LifecycleConfiguration:
          Rules:
          - Id: DeleteContentAfter1Day
            Prefix: ''
            Status: 'Enabled'
            ExpirationInDays: 1

functions:
  lambda-1:
    handler: handler.lambda_function
    memorySize: 256
    timeout: 30
    environment:
      APPDYNAMICS_TIER_NAME: ${self:service}-lambda-1
    events:
      - http:
          path: /{proxy+}
          method: any

  lambda-2:
    handler: handler2.lambda_function
    environment:
      APPDYNAMICS_TIER_NAME: ${self:service}-lambda-2

#    The following are a few example events you can configure
#    NOTE: Please make sure to change your handler code to work with those events
#    Check the event documentation for details
#    events:
#      - http:
#          path: users/create
#          method: get
#      - websocket: $connect
#      - s3: ${env:BUCKET}
#      - schedule: rate(10 minutes)
#      - sns: greeter-topic
#      - stream: arn:aws:dynamodb:region:XXXXXX:table/foo/stream/1970-01-01T00:00:00.000
#      - alexaSkill: amzn1.ask.skill.xx-xx-xx-xx
#      - alexaSmartHome: amzn1.ask.skill.xx-xx-xx-xx
#      - iot:
#          sql: "SELECT * FROM 'some_topic'"
#      - cloudwatchEvent:
#          event:
#            source:
#              - "aws.ec2"
#            detail-type:
#              - "EC2 Instance State-change Notification"
#            detail:
#              state:
#                - pending
#      - cloudwatchLog: '/aws/lambda/hello'
#      - cognitoUserPool:
#          pool: MyUserPool
#          trigger: PreSignUp
#      - alb:
#          listenerArn: arn:aws:elasticloadbalancing:us-east-1:XXXXXX:listener/app/my-load-balancer/50dc6c495c0c9188/
#          priority: 1
#          conditions:
#            host: example.com
#            path: /hello

#    Define function environment variables here
#    environment:
#      variable2: value2

# you can add CloudFormation resource templates here
#resources:
#  Resources:
#    NewResource:
#      Type: AWS::S3::Bucket
#      Properties:
#        BucketName: my-new-bucket
#  Outputs:
#     NewOutput:
#       Description: "Description for the output"
#       Value: "Some output value"
